{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.ts","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["SortBy","TodoList","state","query","sortTypes","all","handleChange","event","target","name","value","key","setState","getVisibleTodos","todos","props","lowerQuery","toLowerCase","visibleTodos","filter","todo","title","includes","completed","onUserSelection","this","className","htmlFor","id","placeholder","type","onChange","active","map","classNames","checked","readOnly","onClick","userId","React","Component","API_URL","loadTodos","a","limit","fetch","response","json","loadUser","CurrentUser","user","reloadUser","prevProps","email","phone","onClearUser","App","selectedUserId","handleUserSelection","clearUser","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6ee6fcdb.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\ninterface Props {\n  onUserSelection: (userId: number) => void;\n  todos: Todo[];\n}\n\ninterface State {\n  query: string;\n  sortTypes: SortBy;\n}\n\nenum SortBy {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n\nexport class TodoList extends React.Component<Props, State> {\n  state = {\n    query: '',\n    sortTypes: SortBy.all,\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\n    const { name, value } = event.target;\n    const key: keyof State = name as keyof State;\n\n    this.setState({\n      [key]: value,\n    } as Pick<State, keyof State>);\n  };\n\n  getVisibleTodos = () => {\n    const { todos } = this.props;\n    const { query, sortTypes } = this.state;\n    const lowerQuery = query.toLowerCase();\n\n    let visibleTodos = todos.filter(todo => todo.title.toLowerCase().includes(lowerQuery));\n\n    visibleTodos = visibleTodos.filter((todo) => {\n      switch (sortTypes) {\n        case 'all':\n          return todo;\n        case 'active':\n          return todo.completed !== true;\n        case 'completed':\n          return todo.completed === true;\n\n        default:\n          return todo;\n      }\n    });\n\n    return visibleTodos;\n  };\n\n  render() {\n    const { onUserSelection } = this.props;\n    const { query, sortTypes } = this.state;\n    const visibleTodos = this.getVisibleTodos();\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <label htmlFor=\"TodoList__filter\">\n          <input\n            id=\"TodoList__filter\"\n            className=\"\"\n            placeholder=\"Enter the key word\"\n            type=\"text\"\n            name=\"query\"\n            value={query}\n            onChange={this.handleChange}\n          />\n        </label>\n\n        <select\n          className=\"\"\n          name=\"sortTypes\"\n          value={sortTypes}\n          onChange={this.handleChange}\n        >\n          <option value={SortBy.all}>All</option>\n          <option value={SortBy.active}>Active</option>\n          <option value={SortBy.completed}>Completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map((todo) => (\n              <li\n                key={todo.id}\n                className={classNames('TodoList__item', {\n                  'TodoList__item--unchecked': !todo.completed,\n                  'TodoList__item--checked': todo.completed,\n                })}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    checked={todo.completed}\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n                    TodoList__user-button\n                    TodoList__user-button--selected\n                    button\n                  \"\n                  type=\"button\"\n                  onClick={() => {\n                    onUserSelection(todo.userId);\n                  }}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const loadTodos = async (limit = 20) => {\n  const response = await fetch(`${API_URL}/todos?limit=${limit}`);\n\n  return response.json();\n};\n\nexport const loadUser = async (userId: number) => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { loadUser } from '../../api/api';\n\ninterface Props {\n  userId: number;\n  onClearUser: () => void;\n}\n\ntype State = {\n  user: User | null;\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    this.reloadUser(this.props.userId);\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      this.reloadUser(this.props.userId);\n    }\n  }\n\n  async reloadUser(userId: number) {\n    const user = await loadUser(userId);\n\n    this.setState({\n      user,\n    });\n  }\n\n  render() {\n    const { user } = this.state;\n\n    if (!user) {\n      return <div>User not found</div>;\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${user.id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          className=\"\n          CurrentUser__clear\n          TodoList__user-button--selected\n          button\n        \"\n          onClick={this.props.onClearUser}\n          type=\"button\"\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { loadTodos } from './api/api';\n\ninterface State {\n  todos: Todo[];\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const data = await loadTodos();\n\n    this.setState({\n      todos: data,\n    });\n  }\n\n  handleUserSelection = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            onUserSelection={this.handleUserSelection}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                userId={this.state.selectedUserId}\n                onClearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}